"use client";

import {
  BadgeCheck,
  Bell,
  ChevronsUpDown,
  CreditCard,
  LogOut,
  Sparkles,
} from "lucide-react";

  <DropdownMenuLabel className="p-0 font-normal">
              <div className="flex items-center gap-2 px-1 py-1.5 text-left text-sm">
                <Avatar className="h-8 w-8 rounded-lg">
                  <AvatarImage src={user.avatar} alt={user.name} />
                  <AvatarFallback className="rounded-lg">CN</AvatarFallback>
    </Avatar>
                <div className="grid flex-1 text-left text-sm leading-tight">
                  <span className="truncate font-semibold">{user.name}</span>
                  <span className="truncate text-xs">{user.email}</span>
                </div>
  </div>
            </DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuGroup>
              <DropdownMenuItem>
                <Sparkles />
                Upgrade to Pro
              </DropdownMenuItem>
            </DropdownMenuGroup>
            <DropdownMenuSeparator />
            <DropdownMenuGroup>
              <DropdownMenuItem>
              export function NavProjects({
  items,
}: {
  items: {
    title: string;
    url: string;
    icon?: LucideIcon;
    isActive?: boolean;
    items?: {
      title: string;
      url: string;
    }[];
  }[];
                }) {
                 return (
    <SidebarGroup>
      <SidebarGroupLabel>Others</SidebarGroupLabel>
      <SidebarMenu>
        {items.map((item) => (
          <Collapsible
            key={item.title}
            asChild
            defaultOpen={item.isActive}
            className="group/collapsible"
          > <SidebarMenuItem>
              <SidebarMenuButton tooltip={item.title}>
                {item.icon && <item.icon />}
                <span>{item.title}</span>
              </SidebarMenuButton>
            </SidebarMenuItem>
          </Collapsible>
        ))}
      </SidebarMenu>
    </SidebarGroup>
  );
}
const LandingPage = () => {
  return (
    <div className="flex items-center flex-col justify-center h-screen">
      <Image src="/logo.png" alt="Logo" width={100} height={100} />
      <p className="text-5xl font-black text-blue-600 mt-3">Welcome To Lazada Logistics Applicant System</p>
      <p className="mt-2">Please fill out the following information to apply for a position. You can print your application after submitting it.</p>
      <div className="flex items-center gap-2">
      <Link href="/onboarding" className={`mt-5 px-10 ${buttonVariants()}`}>Apply Now</Link>
      <Link href="/login" className={`mt-5 px-10 ${buttonVariants({variant: "destructive"})}`}>Login &rarr;</Link>
      </div>
    </div>
  );
};
const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});
export const metadata: Metadata = {
  title: "Lazada Expedise Agency PH",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Toaster richColors position="top-center" />
        {children}
      </body>
    </html>
  );
}
const Onboarding = () => {
  const { step } = useApplicationAppStore();

  // Function to render the current step based on the state
  const renderStep = () => {
    switch (step) {
      case 1:
        return <PersonalInfo />;
      case 2:
        return <QualificationInfo />;
      case 3:
        return <WorkInfo />;
      case 4:
        return <EducationInfo />;
      case 5:
        return <ReviewSubmit />;
      default:
        return null;
    }
  };
  return (
    <div className="relative pb-20">
      {/* Blue Background Box */}
      <div className="bg-blue-600 -z-10 absolute w-full h-60 top-0 inset-x-0"></div>

      {/* Title inside the Blue Box */}
      <p className="text-center text-white font-bold text-3xl pt-20">
        Lazada Logistics Application Form
      </p>
      <p className="text-center text-white font-normal text-lg pt-2">
        Please complete all the steps below to provide your personal, work, and
        educational information. This will help us evaluate your qualifications
        for the role.
      </p>
           {/* STEPS */}
      <div className="relative z-10 mt-10 p-6 bg-white shadow-lg border rounded-lg max-w-4xl mx-auto">
        {/* PROGRESS BAR */}
        <ProgressBar />
        {renderStep()}
      </div>
    </div>
  );
};
const FailModal = ({
  isOpen,
  onClose,
  data,
}: {
  isOpen: boolean;
  onClose: () => void;
  data: any;
}) => {
  const params = useParams();
  const [reason, setReason] = React.useState("");
  const [loading, setLoading] = React.useState(false);
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    try {
      if (typeof params.applicationId === "string") {
        const response = await failApplicant(
          params.applicationId,
          data.jobApplicant.name,
          data.jobApplicant.email,
          reason
        );
        if (response.error) {
          toast.error(response.error);
        } else {
          toast.success(response.success);
          window.location.assign("/admin/application-management");
        }
      } else {
        toast.error("Invalid application ID");
      }
    } catch (error) {
      toast.error("Failed to fail application");
      console.error(error);
    } finally {
      setLoading(false);
    }
  };
   return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      description="This action cannot be undone"
      title="Are you sure you want to fail this application?"
    >
      <form onSubmit={handleSubmit} className="space-y-3">
        <div className="space-y-1">
          <Label>
            Reason for Failure <span className="text-red-500">*</span>
          </Label>
          <Textarea
            value={reason}
            onChange={(e) => setReason(e.target.value)}
            disabled={loading}
            placeholder="Enter Reason for Failure"
          />
        </div>
        "use client";

import React, { useState } from "react";
import { Button } from "../ui/button";
import useApplicationAppStore from "@/lib/store";
import { educationInfoSchema } from "@/lib/validators";
import { Separator } from "../ui/separator";
import { Label } from "../ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "../ui/select";

const EducationInfo = () => {
  const { nextStep, prevStep, formData, setEducationInfo } =
    useApplicationAppStore();
  const [errors, setErrors] = useState<any>({});
  const handleSelectChange = (name: string, value: string) => {
    setErrors((prev: any) => ({ ...prev, [name]: "" }));
    setEducationInfo({ [name]: value });
  };
  const validateAndNext = () => {
    try {
      educationInfoSchema.parse(formData.educationInfo);
      setErrors({});
      nextStep();
    } catch (error: any) {
      const errorMap: any = {};
      error.errors.forEach((err: any) => {
        errorMap[err.path[0]] = err.message;
      });
      setErrors(errorMap);
    }
  };

  return (
    <div>
      <h2 className="text-xl font-semibold pb-3">Educational Attainments</h2>
      <Separator className="bg-zinc-300" />
      <div className="mt-5">
        <div className="grid md:grid-cols-2 mt-5 gap-6">
          <div className="space-y-1">
            <Label
              className={`text-sm ${
                errors.degreeStatus ? "text-red-500" : "text-gray-900"
              }`}
            >
               Degree/Undergraduate Status
              <span className="text-red-500">*</span>
            </Label>
            <Select
              defaultValue={formData.educationInfo.degreeStatus}
              onValueChange={(value) => {
                handleSelectChange("degreeStatus", value);
              }}
            >
              <SelectTrigger
                className={`${
                  errors.degreeStatus ? "border-red-500 focus:ring-red-500" : ""
                }`}
              >
                <SelectValue placeholder="--Degree/Undegraduate Status--" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Bachelor's Degree">
                  Bachelor&apos;s Degree
                </SelectItem>
                <SelectItem value="College Undergraduate (3rd or 4th year)">
                  College Undergraduate (3rd or 4th year)
                </SelectItem>
                <SelectItem value="College Undergraduate (1st or 2nd year)">
                  College Undergraduate (1st or 2nd year)
                </SelectItem>
                <SelectItem value="No Degree or Dropped Out">
                  No Degree or Dropped Out
                </SelectItem>
              </SelectContent>
            </Select>
            {errors.degreeStatus && (
              <p className="text-red-500 text-sm">{errors.degreeStatus}</p>
            )}
</div>
          const PersonalInfo = () => {
  const { nextStep, formData, setPersonalInfo } = useApplicationAppStore();
  const [errors, setErrors] = useState<any>({});
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setErrors((prev: any) => ({ ...prev, [e.target.name]: "" }));
    setPersonalInfo({ [e.target.name]: e.target.value });
  };
  const handleImageUpload = (url: string) => {
    setPersonalInfo({ profileImage: url });
  };

  const handleSelectChange = (name: string, value: string) => {
    setErrors((prev: any) => ({ ...prev, [name]: "" }));
    setPersonalInfo({ [name]: value });
  };

  const [selectedRegionName, setSelectedRegionName] = useState<string>("");
  const [selectedProvinceName, setSelectedProvinceName] = useState<string>("");
  const [selectedMunicipalityName, setSelectedMunicipalityName] =
    useState<string>("");

  const {
    regionOptions,
    provinceOptions,
    municipalityOptions,
    barangayOptions,
  } = useAddressData(
    selectedRegionName,
    selectedProvinceName,
    selectedMunicipalityName
  );
  const validateAndNext = () => {
    try {
      personalInfoSchema.parse(formData.personalInfo);
      setErrors({});
      nextStep();
    } catch (error: any) {
      const errorMap: any = {};
      error.errors.forEach((err: any) => {
        errorMap[err.path[0]] = err.message;
      });
      setErrors(errorMap);
    }
  };

             return (
    <div>
      <h2 className="text-xl font-semibold pb-3">Personal Information</h2>
      <Separator className="bg-zinc-300" />
      <div className="mt-5">
        <div className="grid grid-cols-5 mb-5 gap-6">
          <div className="col-span-1">
            <ImageUpload
              defaultValue={formData.personalInfo.profileImage}
              onImageUpload={handleImageUpload}
            />
          </div>
          <div className="col-span-4 space-y-4">
            <div className="space-y-1">
              <Label
                className={`text-sm ${
                  errors.name ? "text-red-500" : "text-gray-900"
                }`}
              >
               Full Name <span className="text-red-500">*</span>
              </Label>
              <Input
                type="text"
                required
                placeholder="Enter full name"
                name="name"
                value={formData.personalInfo.name}
                className={`${
                  errors.name ? "border-red-500 focus:ring-red-500" : ""
                }`}
                onChange={handleChange}
              />
              {errors.name && (
                <p className="text-red-500 text-sm">{errors.name}</p>
              )}
  </div>
             
            <div className="space-y-1">
              <Label
                className={`text-sm ${
                  errors.email ? "text-red-500" : "text-gray-900"
                }`}
              >
                Email Address <span className="text-red-500">*</span>
              </Label>
              <Input
                type="email"
                required
                placeholder="Enter email address"
                name="email"
                className={`${
                  errors.email ? "border-red-500 focus:ring-red-500" : ""
                }`}
                value={formData.personalInfo.email}
                onChange={handleChange}
  />
                    {errors.email && (
                <p className="text-red-500 text-sm">{errors.email}</p>
              )}
            </div>
          </div>
        </div>
        <div className="grid md:grid-cols-2 mt-5 gap-6">
          <div className="space-y-1">
            <Label
              className={`text-sm ${
                errors.age ? "text-red-500" : "text-gray-900"
              }`}
            >
             Age <span className="text-red-500">*</span>
            </Label>
            <Input
              type="number"
              required
              placeholder="Enter age"
              name="age"
              value={formData.personalInfo.age}
              className={`${
                errors.age ? "border-red-500 focus:ring-red-500" : ""
              }`}
              onChange={handleChange}
            />
            {errors.age && <p className="text-red-500 text-sm">{errors.age}</p>}
          </div>
          <div className="space-y-1">
            <Label
              className={`text-sm ${
                errors.sex ? "text-red-500" : "text-gray-900"
              }`}
            >
             Sex <span className="text-red-500">*</span>
            </Label>
            <Select
              defaultValue={formData.personalInfo.sex}
              onValueChange={(value) => handleSelectChange("sex", value)}
            >
              <SelectTrigger
                className={`${
                  errors.sex ? "border-red-500 focus:ring-red-500" : ""
                }`}
              >
               <SelectValue placeholder="Select sex" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Male">Male</SelectItem>
                <SelectItem value="Female">Female</SelectItem>
              </SelectContent>
            </Select>
            {errors.sex && <p className="text-red-500 text-sm">{errors.sex}</p>}
          </div>
        </div>
        <div className="grid md:grid-cols-2 mt-5 gap-6">
          <div className="space-y-1">
            <Label
              className={`text-sm ${
                errors.contactNumber ? "text-red-500" : "text-gray-900"
              }`}
            >
                Phone Number <span className="text-red-500">*</span>
            </Label>
            <Input
              type="number"
              required
              placeholder="Enter phone number"
              name="contactNumber"
              className={`${
                errors.contactNumber ? "border-red-500 focus:ring-red-500" : ""
              }`}
              value={formData.personalInfo.contactNumber}
              onChange={handleChange}
            />
            {errors.contactNumber && (
              <p className="text-red-500 text-sm">{errors.contactNumber}</p>
            )}
  </div>
           <div className="space-y-1">
            <Label
              className={`text-sm ${
                errors.houseNumber ? "text-red-500" : "text-gray-900"
              }`}
            >
              House/Unit/Block No., Street, Subdivision/Village{" "}
              <span className="text-red-500">*</span>
            </Label>
            <Input
              type="text"
              required
              placeholder="Enter house number"
              name="houseNumber"
              value={formData.personalInfo.houseNumber}
              className={`${
                errors.houseNumber ? "border-red-500 focus:ring-red-500" : ""
              }`}
              onChange={handleChange}
            />
            {errors.houseNumber && (
              <p className="text-red-500 text-sm">{errors.houseNumber}</p>
            )}
          </div>
  </div>
         <div className="grid md:grid-cols-2 mt-5 gap-6">
          <div className="space-y-1">
            <Label
              className={`text-sm ${
                errors.region ? "text-red-500" : "text-gray-900"
              }`}
            >
              Region <span className="text-red-500">*</span>
            </Label>
            <Select
              defaultValue={selectedRegionName}
              onValueChange={(value) => {
                setSelectedRegionName(value);
                handleSelectChange("region", value);
              }}
            >
              <SelectTrigger
                className={`${
                  errors.region ? "border-red-500 focus:ring-red-500" : ""
                }`}
              >
                <SelectValue placeholder="Select region" />
              </SelectTrigger>
              <SelectContent>
                {regionOptions.map((region) => (
                  <SelectItem key={region} value={region}>
                    {region}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.region && (
              <p className="text-red-500 text-sm">{errors.region}</p>
            )}
          </div>
           <div className="space-y-1">
            <Label
              className={`text-sm ${
                errors.province ? "text-red-500" : "text-gray-900"
              }`}
            >
              Province <span className="text-red-500">*</span>
            </Label>
            <Select
              defaultValue={selectedProvinceName}
              onValueChange={(value) => {
                setSelectedProvinceName(value);
                handleSelectChange("province", value);
              }}
            >
              <SelectTrigger
                className={`${
                  errors.province ? "border-red-500 focus:ring-red-500" : ""
                }`}
              >
                <SelectValue placeholder="Select province" />
              </SelectTrigger>
              <SelectContent>
                {provinceOptions.map((province) => (
                  <SelectItem key={province} value={province}>
                    {province}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.province && (
              <p className="text-red-500 text-sm">{errors.province}</p>
            )}
          </div>
        </div>
         <div className="grid md:grid-cols-3 mt-5 gap-6">
          <div className="space-y-1">
            <Label
              className={`text-sm ${
                errors.municipality ? "text-red-500" : "text-gray-900"
              }`}
            >
              Municipality <span className="text-red-500">*</span>
            </Label>
            <Select
              defaultValue={selectedMunicipalityName}
              onValueChange={(value) => {
                setSelectedMunicipalityName(value);
                handleSelectChange("municipality", value);
              }}
            >
              <SelectTrigger
                className={`${
                  errors.municipality ? "border-red-500 focus:ring-red-500" : ""
                }`}
              >
              <SelectValue placeholder="Select municipality" />
              </SelectTrigger>
              <SelectContent>
                {municipalityOptions.map((municipality) => (
                  <SelectItem key={municipality} value={municipality}>
                    {municipality}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.municipality && (
              <p className="text-red-500 text-sm">{errors.municipality}</p>
            )}
          </div>
          <div className="space-y-1">
            <Label
              className={`text-sm ${
                errors.barangay ? "text-red-500" : "text-gray-900"
              }`}
            >
               Barangay <span className="text-red-500">*</span>
            </Label>
            <Select
              defaultValue={formData.personalInfo.barangay}
              onValueChange={(value) => handleSelectChange("barangay", value)}
            >
              <SelectTrigger
                className={`${
                  errors.barangay ? "border-red-500 focus:ring-red-500" : ""
                }`}
              >
                <SelectValue placeholder="Select barangay" />
              </SelectTrigger>
              <SelectContent>
                {barangayOptions.map((barangay) => (
                  <SelectItem key={barangay} value={barangay}>
                    {barangay}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.barangay && (
              <p className="text-red-500 text-sm">{errors.barangay}</p>
            )}
          </div>
           <div className="space-y-1">
            <Label
              className={`text-sm ${
                errors.zipCode ? "text-red-500" : "text-gray-900"
              }`}
            >
              Zip Code <span className="text-red-500">*</span>
            </Label>
            <Input
              required
              placeholder="Enter zip code"
              name="zipCode"
              value={formData.personalInfo.zipCode}
              className={`${
                errors.zipCode ? "border-red-500 focus:ring-red-500" : ""
              }`}
              onChange={handleChange}
            />
            {errors.zipCode && (
              <p className="text-red-500 text-sm">{errors.zipCode}</p>
            )
}
              </div>
        </div>
      </div>
      {/* BUTTONS */}
      <div className="flex justify-end mt-5">
        <Button onClick={validateAndNext}>Next &rarr;</Button>
      </div>
    </div>
  );
};

const QualificationInfo = () => {
  const { nextStep, formData, setQualificationSkillsInfo, prevStep } =
    useApplicationAppStore();
  const [errors, setErrors] = useState<any>({});
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setErrors((prev: any) => ({ ...prev, [e.target.name]: "" }));
    setQualificationSkillsInfo({ [e.target.name]: e.target.value });
  };
  const validateAndNext = () => {
    try {
      qualificationSkillsInfoSchema.parse(formData.qualificationSkillsInfo);
      setErrors({});
      nextStep();
    } catch (error: any) {
      const errorMap: any = {};
      error.errors.forEach((err: any) => {
        errorMap[err.path[0]] = err.message;
      });
      setErrors(errorMap);
    }
  };
const fieldOfExpertiseOptions = [
    "Operations Management",
    "Warehouse Manager",
    "Transportation Analyst",
    "Logistics Engineer",
    "Inventory Manager",
    "Procurement Manager",
    "Customer Service Representative",
    "Dispatcher",
    "Encoder",
    "IT in logistics field",
    "Business Related Field",
    "Engineering Related Field",
    "Accounting Related Field",
    "Human Resource Related Field",
    "Marketing Related Field",
    "Arts and Design Related Field",
    "Health and Medical Related Field",
    "Others",
  ];
   return (
    <div>
      <h2 className="text-xl font-semibold pb-3">
        Qualification and Skill Criteria
      </h2>
      <Separator className="bg-zinc-300" />
      <div className="mt-5">
        <div className="grid md:grid-cols-2 mt-5 gap-6">
          <div className="space-y-1">
            <Label
              className={`text-sm ${
                errors.totalYearsExperience ? "text-red-500" : "text-gray-900"
              }`}
            >
                Experience (Years) <span className="text-red-500">*</span>
            </Label>
            <Select
              name="totalYearsExperience"
              defaultValue={
                formData.qualificationSkillsInfo.totalYearsExperience
              }
              onValueChange={(value) =>
                handleChange({
                  target: { name: "totalYearsExperience", value },
                } as React.ChangeEvent<HTMLInputElement>)
              }
            >
              <SelectTrigger
                className={`${
                  errors.totalYearsExperience
                    ? "border-red-500 focus:ring-red-500"
                    : ""
                }`}
              >
                <SelectValue placeholder="--Experience (Years)--" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="2 years and above">
                  2 years and above
                </SelectItem>
                <SelectItem value="1 and 1/2 years">1 and 1/2 years</SelectItem>
                <SelectItem value="6 months">6 months</SelectItem>
                <SelectItem value="3 months and below">
                  3 months and below
                </SelectItem>
              </SelectContent>
  </Select>
             {errors.totalYearsExperience && (
              <p className="text-red-500 text-sm">
                {errors.totalYearsExperience}
              </p>
            )}
          </div>
          <div className="space-y-1">
            <Label
              className={`text-sm ${
                errors.highestRoleAchieved ? "text-red-500" : "text-gray-900"
              }`}
            >
              Highest Role/Position Achieved{" "}
              <span className="text-red-500">*</span>
            </Label>
            <Select
              name="highestRoleAchieved"
              defaultValue={
                formData.qualificationSkillsInfo.highestRoleAchieved
              }
              onValueChange={(value) =>
                handleChange({
                  target: { name: "highestRoleAchieved", value },
                } as React.ChangeEvent<HTMLInputElement>)
              }
            >
               <SelectTrigger
                className={`${
                  errors.highestRoleAchieved
                    ? "border-red-500 focus:ring-red-500"
                    : ""
                }`}
              >
                <SelectValue placeholder="--Highest Role/Position Achieved--" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Mid-Level Management">
                  Mid-Level Management
                </SelectItem>
                <SelectItem value="Junior Position">Junior Position</SelectItem>
                <SelectItem value="Entry-Level Position">
                  Entry-Level Position
                </SelectItem>
              </SelectContent>
            </Select>
            {errors.highestRoleAchieved && (
              <p className="text-red-500 text-sm">
                {errors.highestRoleAchieved}
              </p>
            )}